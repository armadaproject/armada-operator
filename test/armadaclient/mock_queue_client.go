// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/armadaproject/armada-operator/test/armadaclient (interfaces: QueueClient)

// Package armadaclient is a generated GoMock package.
package armadaclient

import (
	context "context"
	reflect "reflect"

	api "github.com/armadaproject/armada/pkg/api"
	types "github.com/gogo/protobuf/types"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockQueueClient is a mock of QueueClient interface.
type MockQueueClient struct {
	ctrl     *gomock.Controller
	recorder *MockQueueClientMockRecorder
}

// MockQueueClientMockRecorder is the mock recorder for MockQueueClient.
type MockQueueClientMockRecorder struct {
	mock *MockQueueClient
}

// NewMockQueueClient creates a new mock instance.
func NewMockQueueClient(ctrl *gomock.Controller) *MockQueueClient {
	mock := &MockQueueClient{ctrl: ctrl}
	mock.recorder = &MockQueueClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueueClient) EXPECT() *MockQueueClientMockRecorder {
	return m.recorder
}

// CancelOnQueue mocks base method.
func (m *MockQueueClient) CancelOnQueue(arg0 context.Context, arg1 *api.QueueCancelRequest, arg2 ...grpc.CallOption) (*types.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelOnQueue", varargs...)
	ret0, _ := ret[0].(*types.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelOnQueue indicates an expected call of CancelOnQueue.
func (mr *MockQueueClientMockRecorder) CancelOnQueue(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelOnQueue", reflect.TypeOf((*MockQueueClient)(nil).CancelOnQueue), varargs...)
}

// CordonQueue mocks base method.
func (m *MockQueueClient) CordonQueue(arg0 context.Context, arg1 *api.QueueCordonRequest, arg2 ...grpc.CallOption) (*types.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CordonQueue", varargs...)
	ret0, _ := ret[0].(*types.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CordonQueue indicates an expected call of CordonQueue.
func (mr *MockQueueClientMockRecorder) CordonQueue(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CordonQueue", reflect.TypeOf((*MockQueueClient)(nil).CordonQueue), varargs...)
}

// CreateQueue mocks base method.
func (m *MockQueueClient) CreateQueue(arg0 context.Context, arg1 *api.Queue, arg2 ...grpc.CallOption) (*types.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateQueue", varargs...)
	ret0, _ := ret[0].(*types.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateQueue indicates an expected call of CreateQueue.
func (mr *MockQueueClientMockRecorder) CreateQueue(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQueue", reflect.TypeOf((*MockQueueClient)(nil).CreateQueue), varargs...)
}

// CreateQueues mocks base method.
func (m *MockQueueClient) CreateQueues(arg0 context.Context, arg1 *api.QueueList, arg2 ...grpc.CallOption) (*api.BatchQueueCreateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateQueues", varargs...)
	ret0, _ := ret[0].(*api.BatchQueueCreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateQueues indicates an expected call of CreateQueues.
func (mr *MockQueueClientMockRecorder) CreateQueues(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQueues", reflect.TypeOf((*MockQueueClient)(nil).CreateQueues), varargs...)
}

// DeleteQueue mocks base method.
func (m *MockQueueClient) DeleteQueue(arg0 context.Context, arg1 *api.QueueDeleteRequest, arg2 ...grpc.CallOption) (*types.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteQueue", varargs...)
	ret0, _ := ret[0].(*types.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteQueue indicates an expected call of DeleteQueue.
func (mr *MockQueueClientMockRecorder) DeleteQueue(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQueue", reflect.TypeOf((*MockQueueClient)(nil).DeleteQueue), varargs...)
}

// GetQueue mocks base method.
func (m *MockQueueClient) GetQueue(arg0 context.Context, arg1 *api.QueueGetRequest, arg2 ...grpc.CallOption) (*api.Queue, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetQueue", varargs...)
	ret0, _ := ret[0].(*api.Queue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQueue indicates an expected call of GetQueue.
func (mr *MockQueueClientMockRecorder) GetQueue(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueue", reflect.TypeOf((*MockQueueClient)(nil).GetQueue), varargs...)
}

// GetQueues mocks base method.
func (m *MockQueueClient) GetQueues(arg0 context.Context, arg1 *api.StreamingQueueGetRequest, arg2 ...grpc.CallOption) (api.QueueService_GetQueuesClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetQueues", varargs...)
	ret0, _ := ret[0].(api.QueueService_GetQueuesClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQueues indicates an expected call of GetQueues.
func (mr *MockQueueClientMockRecorder) GetQueues(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueues", reflect.TypeOf((*MockQueueClient)(nil).GetQueues), varargs...)
}

// PreemptOnQueue mocks base method.
func (m *MockQueueClient) PreemptOnQueue(arg0 context.Context, arg1 *api.QueuePreemptRequest, arg2 ...grpc.CallOption) (*types.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PreemptOnQueue", varargs...)
	ret0, _ := ret[0].(*types.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PreemptOnQueue indicates an expected call of PreemptOnQueue.
func (mr *MockQueueClientMockRecorder) PreemptOnQueue(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreemptOnQueue", reflect.TypeOf((*MockQueueClient)(nil).PreemptOnQueue), varargs...)
}

// UncordonQueue mocks base method.
func (m *MockQueueClient) UncordonQueue(arg0 context.Context, arg1 *api.QueueUncordonRequest, arg2 ...grpc.CallOption) (*types.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UncordonQueue", varargs...)
	ret0, _ := ret[0].(*types.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UncordonQueue indicates an expected call of UncordonQueue.
func (mr *MockQueueClientMockRecorder) UncordonQueue(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UncordonQueue", reflect.TypeOf((*MockQueueClient)(nil).UncordonQueue), varargs...)
}

// UpdateQueue mocks base method.
func (m *MockQueueClient) UpdateQueue(arg0 context.Context, arg1 *api.Queue, arg2 ...grpc.CallOption) (*types.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateQueue", varargs...)
	ret0, _ := ret[0].(*types.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateQueue indicates an expected call of UpdateQueue.
func (mr *MockQueueClientMockRecorder) UpdateQueue(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQueue", reflect.TypeOf((*MockQueueClient)(nil).UpdateQueue), varargs...)
}

// UpdateQueues mocks base method.
func (m *MockQueueClient) UpdateQueues(arg0 context.Context, arg1 *api.QueueList, arg2 ...grpc.CallOption) (*api.BatchQueueUpdateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateQueues", varargs...)
	ret0, _ := ret[0].(*api.BatchQueueUpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateQueues indicates an expected call of UpdateQueues.
func (mr *MockQueueClientMockRecorder) UpdateQueues(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQueues", reflect.TypeOf((*MockQueueClient)(nil).UpdateQueues), varargs...)
}
